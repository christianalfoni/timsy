{"version":3,"file":"index.test.js","sourceRoot":"","sources":["src/index.test.ts"],"names":[],"mappings":"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","sourcesContent":["import { createMachine, createStates } from \".\";\n\ndescribe(\"states\", () => {\n  it(\"should instantiate states\", () => {\n    const states = createStates({\n      FOO: () => ({}),\n    });\n    expect(states.FOO()).toEqual({ state: \"FOO\" });\n  });\n  it(\"should take params to produce state\", () => {\n    const states = createStates({\n      FOO: (foo: string) => ({ foo }),\n    });\n    expect(states.FOO(\"bar\")).toEqual({ state: \"FOO\", foo: \"bar\" });\n  });\n});\n\ndescribe(\"machine\", () => {\n  it(\"should create machine with function to spawn\", () => {\n    const states = createStates({\n      FOO: () => ({}),\n      BAR: () => ({}),\n    });\n    const spawn = createMachine(states, {\n      FOO: {},\n      BAR: {},\n    });\n    expect(typeof spawn).toBe(\"function\");\n  });\n  it(\"should spawn machine with initial state\", () => {\n    const states = createStates({\n      FOO: () => ({}),\n      BAR: () => ({}),\n    });\n    const spawn = createMachine(states, {\n      FOO: {},\n      BAR: {},\n    });\n    expect(spawn(states.FOO()).getState()).toEqual({ state: \"FOO\" });\n  });\n  it(\"should expose events as functions\", () => {\n    const states = createStates({\n      FOO: () => ({}),\n      BAR: () => ({}),\n    });\n    const spawn = createMachine(states, {\n      FOO: {\n        SWITCH: () => () => states.BAR(),\n      },\n      BAR: {\n        SWITCH: () => () => states.FOO(),\n      },\n    });\n    const testMachine = spawn(states.FOO());\n\n    expect(typeof testMachine.events.SWITCH).toBe(\"function\");\n  });\n  it(\"should handle event and transition\", () => {\n    const states = createStates({\n      FOO: () => ({}),\n      BAR: () => ({}),\n    });\n    const spawn = createMachine(states, {\n      FOO: {\n        SWITCH: () => () => states.BAR(),\n      },\n      BAR: {\n        SWITCH: () => () => states.FOO(),\n      },\n    });\n    const testMachine = spawn(states.FOO());\n    expect(testMachine.getState()).toEqual({ state: \"FOO\" });\n    testMachine.events.SWITCH();\n    expect(testMachine.getState()).toEqual({ state: \"BAR\" });\n  });\n  it(\"should ignore event and keep state\", () => {\n    const states = createStates({\n      FOO: () => ({}),\n      BAR: () => ({}),\n    });\n    const spawn = createMachine(states, {\n      FOO: {},\n      BAR: {\n        SWITCH: () => () => states.FOO(),\n      },\n    });\n    const testMachine = spawn(states.FOO());\n    expect(testMachine.getState()).toEqual({ state: \"FOO\" });\n    testMachine.events.SWITCH();\n    expect(testMachine.getState()).toEqual({ state: \"FOO\" });\n  });\n  it(\"should emit event on transitions\", () => {\n    expect.assertions(3);\n    const states = createStates({\n      FOO: () => ({}),\n      BAR: () => ({}),\n    });\n    const spawn = createMachine(states, {\n      FOO: {\n        SWITCH: () => () => states.BAR(),\n      },\n      BAR: {\n        SWITCH: () => () => states.FOO(),\n      },\n    });\n    const testMachine = spawn(states.FOO());\n    testMachine.subscribe((state, event, oldState) => {\n      expect(state).toEqual({ state: \"BAR\" });\n      expect(event).toEqual({ type: \"SWITCH\", params: [] });\n      expect(oldState).toEqual({ state: \"FOO\" });\n    });\n    testMachine.events.SWITCH();\n  });\n});\n"]}